from pathlib import Path

from discord import ButtonStyle, Color, Embed, NotFound, ui
from strictyaml import Bool, Int, Map, Optional, Seq, Str, Url, load

from jg.coop.cli.sync import main as cli
from jg.coop.lib import discord_task, loggers
from jg.coop.lib.discord_club import ClubChannelID, ClubClient
from jg.coop.lib.mutations import MutationsNotAllowedError, mutating_discord
from jg.coop.models.base import db
from jg.coop.models.club import ClubMessage
from jg.coop.models.mentor import Mentor


MENTOR_EMOJI = "üíÅ"

INFO_EMOJI = "üí°"

DATA_PATH = Path("jg/coop/data/mentors.yml")

SCHEMA = Seq(
    Map(
        {
            "id": Int(),
            "name": Str(),
            Optional("company"): Str(),
            Optional("bio_url"): Url(),
            "topics": Str(),
            Optional("english_only", default=False): Bool(),
            Optional("book_url"): Url(),
        }
    )
)


logger = loggers.from_path(__file__)


@cli.sync_command(dependencies=["club-content"])
def main():
    discord_task.run(sync_mentoring)


@db.connection_context()
async def sync_mentoring(client: ClubClient):
    logger.info("Setting up db table")
    Mentor.drop_table()
    Mentor.create_table()

    logger.info("Parsing YAML")
    for yaml_record in load(DATA_PATH.read_text(), SCHEMA):
        Mentor.create(user=yaml_record.data["id"], **yaml_record.data)
    mentors = Mentor.listing()
    logger.debug(f"Loaded {len(mentors)} mentors from YAML")

    messages_trash = set(ClubMessage.channel_listing(ClubChannelID.MENTORING))
    info_message = ClubMessage.last_bot_message(ClubChannelID.MENTORING, INFO_EMOJI)
    discord_channel = await client.fetch_channel(ClubChannelID.MENTORING)

    return  # FIXME TODO https://app.circleci.com/pipelines/github/juniorguru/junior.guru/10230/workflows/877b3680-5b19-4586-ba74-10fc3b672b77/jobs/49075

    logger.info("Syncing mentors")
    for mentor in mentors:
        try:
            discord_member = await client.club_guild.fetch_member(mentor.user.id)
        except NotFound:
            logger.error(
                f"Not a member! #{mentor.id} ({mentor.name} from {mentor.company})"
            )
            continue
        mentor_params = get_mentor_params(
            mentor, thumbnail_url=discord_member.display_avatar.url
        )

        message = ClubMessage.last_bot_message(
            ClubChannelID.MENTORING, MENTOR_EMOJI, mentor.user.mention
        )
        if message:
            messages_trash.remove(message)
            logger.info(f"Editing existing message for mentor {mentor.name}")
            discord_message = await discord_channel.fetch_message(message.id)
            with mutating_discord(discord_message) as proxy:
                await proxy.edit(**mentor_params)
            mentor.message_url = message.url
            mentor.save()
        else:
            logger.info(f"Creating a new message for mentor {mentor.name}")
            if info_message:
                logger.info("Deleting info message")
                messages_trash.remove(info_message)
                info_discord_message = await discord_channel.fetch_message(
                    info_message.id
                )
                with mutating_discord(info_discord_message) as proxy:
                    await proxy.delete()
                info_message.delete_instance()
                info_message = None
            try:
                with mutating_discord(discord_channel, raises=True) as proxy:
                    discord_message = await proxy.send(**mentor_params)
            except MutationsNotAllowedError:
                pass
            else:
                mentor.message_url = discord_message.jump_url
                mentor.save()

    logger.info("Syncing info")
    info_content = f"{INFO_EMOJI} Co to tady je? Jak to funguje?"
    info_mentee_description = (
        "Pomohlo by ti pravidelnƒõ si s nƒõk√Ωm na hodinku zavolat a probrat sv≈Øj postup? "
        "P≈ôedchoz√≠ zpr√°vy v tomto kan√°lu p≈ôedstavuj√≠ seznam **mentor≈Ø**, kte≈ô√≠ se k takov√© pomoci nab√≠dli. "
        "Postupuj n√°sledovnƒõ:\n"
        "\n"
        "1Ô∏è‚É£ üß≠ Stanov si dlouhodobƒõj≈°√≠ c√≠l (nap≈ô. porozumƒõt API)\n"
        "2Ô∏è‚É£ üëã Podle t√©matu si vyber mentorku/mentora a rezervuj si ƒças na videohovor\n"
        "3Ô∏è‚É£ ü§ù Domluvte se, jak ƒçasto si budete volat (nap≈ô. ka≈æd√© dva t√Ωdny, p≈Øl roku)\n"
        "4Ô∏è‚É£ üìù Rezervuj jednotliv√© sch≈Øzky a p≈ôedem mƒõj jasno, co na nich chce≈° ≈ôe≈°it\n"
        "5Ô∏è‚É£ üöÄ Mentor ti pom√°h√° dos√°hnout c√≠le. Rad√≠ a posouv√° tƒõ spr√°vn√Ωm smƒõrem\n"
        "\n"
        "‚ù§Ô∏è Mento≈ôi jsou dobrovoln√≠ci, ne placen√≠ uƒçitel√©. Aktivita je na tv√© stranƒõ. Va≈æ si jejich ƒçasu a dop≈ôej jim dobr√Ω pocit, pokud pomohli.\n"
    )
    info_mentor_description = (
        "ü¶∏ I ty m≈Ø≈æe≈° mentorovat! "
        "Nemus√≠≈° m√≠t 10 let zku≈°enost√≠ v oboru. "
        "Pus≈• si [p≈ôedn√°≈°ku o mentoringu](https://www.youtube.com/watch?v=8xeX7wfX_x4) od Anny Ossowski, a≈• v√≠≈°, co od toho ƒçekat. "
        "Existuje i [p≈ôepis](https://github.com/honzajavorek/become-mentor/blob/master/README.md) a [ƒçesk√Ω p≈ôeklad](https://github.com/honzajavorek/become-mentor/blob/master/cs.md). "
        "Potom napi≈° Honzovi, p≈ôid√° tƒõ do [seznamu](https://github.com/juniorguru/junior.guru/blob/main/jg/coop/data/mentors.yml)."
    )
    info_params = dict(
        content=info_content,
        embeds=[
            Embed(
                title="Mentoring",
                color=Color.orange(),
                description=info_mentee_description,
            ),
            Embed(description=info_mentor_description),
        ],
    )
    if info_message:
        messages_trash.remove(info_message)
        logger.info("Editing info message")
        discord_message = await discord_channel.fetch_message(info_message.id)
        with mutating_discord(discord_message) as proxy:
            await proxy.edit(**info_params)
    else:
        logger.info("Creating new info message")
        with mutating_discord(discord_channel) as proxy:
            await proxy.send(**info_params)

    logger.info("Deleting extraneous messages")
    for message in messages_trash:
        logger.debug(f"Deleting message #{message.id}: {message.content[:10]}‚Ä¶")
        try:
            discord_message = await discord_channel.fetch_message(message.id)
            with mutating_discord(discord_message) as proxy:
                await proxy.delete()
            message.delete_instance()
        except:
            logger.error(
                f"Could not delete message #{message.id}: {message.content[:10]}‚Ä¶"
            )
            raise


def get_mentor_params(mentor, thumbnail_url=None):
    content = f"{MENTOR_EMOJI} {mentor.user.mention}"
    if mentor.company:
        content += f" ({mentor.company})"

    description = ""
    if mentor.english_only:
        description += "üá¨üáß Pouze anglicky!\n"
    description += f"üìñ {mentor.topics}\n"

    buttons = []
    if mentor.bio_url:
        buttons.append(
            ui.Button(
                emoji="üëã",
                label="P≈ôedstaven√≠",
                url=mentor.bio_url,
                style=ButtonStyle.secondary,
            )
        )
    if mentor.book_url:
        buttons.append(
            ui.Button(
                emoji="üóì",
                label="Rezervuj",
                url=mentor.book_url,
                style=ButtonStyle.secondary,
            )
        )
    else:
        buttons.append(
            ui.Button(
                emoji="<:discord:935790609023787018>",
                label="(Pi≈° p≈ô√≠mo p≈ôes Discord)",
                style=ButtonStyle.secondary,
                disabled=True,
            )
        )

    discord_embed = Embed(description=description)
    if thumbnail_url:
        discord_embed.set_thumbnail(url=thumbnail_url)

    return dict(content=content, embed=discord_embed, view=ui.View(*buttons))
